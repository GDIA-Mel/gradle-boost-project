//
//  Copyright (c) 2012 RemoteReality Corporation. All Rights Reserved. 
//  
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  
//  http://www.apache.org/licenses/LICENSE-2.0
//  
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//  Author(s): Venkat Peri. RemoteReality Corporation.
//



apply plugin: 'maven'

version_ = boostVer.replace('.', '_')

fileBase = "boost_$version_"
filename = fileBase + '.zip'

tmpDir = "$buildDir/tmp"
srcDir = "$buildDir/src"
outDir = "$tmpDir/car"
cacheDir = './.cache'

configurations {
    compile
    release
}

buildscript {
    dependencies {
        classpath group: 'com.github.venkatperi.gradle.plugins', name: 'CarPlugin', version: '1.0-SNAPSHOT'
        classpath group: 'com.github.venkatperi.gradle.plugins', name: 'MSBuildPlugin', version: '1.0-SNAPSHOT'
    }

    repositories {
    ivy {
        url local_ivy
    }
        mavenRepo name: 'snapshots', 
                url: project[repo + '_repo_snapshots_url']
        mavenRepo name: 'releases', 
                url: project[repo + '_repo_releases_url']
        mavenRepo name: 'public', 
            url: project[repo + '_repo_public_url']
    }

}

apply plugin: 'car'
apply plugin: 'msbuild'

task resources << {
    def dirs = [tmpDir, srcDir, outDir, cacheDir]
    dirs.each { mkdir it }
}

task bootstrap << {
    exec {
        workingDir = srcDir + '/' + fileBase
        println 'Working dir: ' + workingDir.toString()
        executable = 'cmd'
        args = ['/c', 'bootstrap']
    }
}

task download(dependsOn: 'resources') << {
    if (!new File(cacheDir + '/' + filename).exists()) {
        println "Downloading sources..."
        ant.get(src: 'http://voxel.dl.sourceforge.net/project/boost/boost/' + boostVer + '/' + filename, dest: cacheDir + '/' + filename, verbose: "true")
    }
    else {
        println "Found sources in cache..."
    }
}

task extract(dependsOn: 'download') << {
    println "Extracting sources..."
    copy {
        from zipTree(cacheDir + '/' + filename)
        into srcDir
        eachFile { println it.getPath() }
    }
}

libraries {
    configuration = project.configurations.compile
}

buildArgs = [
        'define=BOOST_USE_WINDOWS_H',
        '--without-locale',
        '--without-python',
        '--without-test',
        '--without-mpi',
        '--prefix=' + outDir,
        'install']

task vcxproj(overwrite: true) <<{
}

task build(overwrite: true) <<{
}

task stage(overwrite: true) <<{
}


task compile(overwrite: true) << {
	def variant = project.buildConfig == 'dbg' ? 'debug' : 'release'
	def link = project.type == 'lib' ? 'static' : 'dynamic'
	def arch = project.arch == 'x64' ? '64' : '32'
	def crt  = (project.crt == 'md' || project.crt == 'mdd') ? 'shared' : 'static'

	def a = buildArgs +  ["variant=$variant", "link=$link", 
                "address-model=$arch", "runtime-link=$crt"]

    if (project.call=='sc') { //stdcall
        a += ['cxxflags=/Gz', 'define=BOOST_MEM_FN_ENABLE_STDCALL']
    }
		
	exec {
        workingDir = srcDir + '/' + fileBase
        executable = srcDir + '/' + fileBase + '/b2.exe'
        args = a
    }
}

car {
    manifest {
        attributes(
                "dirs": ['include/boost-1_48'],
                'compile'
        )

        attributes(
                "dirs": ['lib'],
                "flags": [],
                'libs': [],
                'link'
        )

        attributes(
                'files': [],
                'runtime'
        )
    }
}


uploadArchives {
    repositories {
    ivy {
        url local_ivy
    }
    mavenDeployer {

        repository(url: project[repo + '_repo_releases_url']) {
            authentication(userName: project[repo + 
                '_repo_releases_username'], 
                password: project[repo + '_repo_releases_password'])
            releases()
        }

/*        repository(url: project[repo + '_repo_snapshots_url']) {
            authentication(userName: project[repo + 
                '_repo_snapshots_username'], 
                password: project[repo + '_repo_snapshots_password'])
            snapshots()
        }
i*/
    }
}
}

msproject {
}


